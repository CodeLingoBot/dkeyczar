
High Priority:

    (Items from interop list at https://groups.google.com/forum/?fromgroups=#!topic/keyczar-discuss/NMyTgnimcwY )

    - Java compatibility fixes:
        - json must include a leading zero if high bit set to match java BigInt
    - RSA encrypt/decrypt only supports OAEP, not PKCS#1
    - Timeout Sign/Verify
    - Signed Session encryption (?)
    - Unversioned Sign/Verify
    - Creation of PBE keys via keyczart

    - HMAC_SHA256

    - AES key hashing bug backwards compat fix (?)

    - improve external docs (README, examples, ...)

    - PKCS#8 private key import/export
      -- asn1 is painful.
      (dsa not supported -- must implement)
      (rsa export not supported -- must implement)

Low Priority:
    - remove internal pbkdf2 implementation and use go.crypto version?
        - extra dependency, but 'standard lib' ?
    - key.Type() => ktFOO constant
    - some of the keyman routines poke into keyCzar internals
    - write code to generate c++ test case for compatibility
    - some of the ImportFOOForBar would be easier if we exported the KeyPurpose enum
    - fix keymeta.Versions so Versions[versionNumber] is correct (placeholder? nil?)
    - write functions to abstract byte-stream format
        getIv()
        getCipherText()
        getSignature()
    - try not to modify slices
    - refactor marshaljson quoted string creation ?
    - better error messages?  "bad version 0x4 in header" vs. "bad version in header"
    - string -> []byte changes for API?
    - streaming encryption/decryption support
    - test cases for
        encodeWeb64String
        decodeWeb64String
        lenPrefixPack
        lenPrefixUnpack
    - for pbereader, don't store password, only hmac? (and let it store the password?0
    - pbkdf2 should take hash.Hash instead of password? (generalize?)
    - code reorg
        split keydata into aeskey, rsakey, ... ?
